// Mocks generated by Mockito 5.4.4 from annotations
// in flora_orm/test/sql/shared_preferences_storage_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flora_orm/flora_orm.dart' as _i1;
import 'package:flora_orm/src/bloc/test.entity.dart' as _i3;
import 'package:flora_orm/src/models/orm.dart' as _i5;
import 'package:mockito/mockito.dart' as _i2;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDbContext_0<TEntity extends _i1.IEntity> extends _i2.SmartFake
    implements _i1.DbContext<TEntity> {
  _FakeDbContext_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrmEngine_1<
        TEntity1 extends _i1.IEntity,
        TMeta1 extends _i1.EntityMeta<TEntity1>,
        TDbContext extends _i1.DbContext<TEntity1>> extends _i2.SmartFake
    implements _i1.OrmEngine<TEntity1, TMeta1, TDbContext> {
  _FakeOrmEngine_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrmManager_2 extends _i2.SmartFake implements _i1.OrmManager {
  _FakeOrmManager_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTestEntity_3 extends _i2.SmartFake implements _i3.TestEntity {
  _FakeTestEntity_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTestEntityMeta_4 extends _i2.SmartFake
    implements _i3.TestEntityMeta {
  _FakeTestEntityMeta_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_5<T1> extends _i2.SmartFake implements _i4.Future<T1> {
  _FakeFuture_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFormattedQuery_6 extends _i2.SmartFake
    implements _i5.FormattedQuery {
  _FakeFormattedQuery_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OrmManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrmManager extends _i2.Mock implements _i1.OrmManager {
  MockOrmManager() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.DbContext<_i1.IEntity> get dbContext => (super.noSuchMethod(
        Invocation.getter(#dbContext),
        returnValue: _FakeDbContext_0<_i1.IEntity>(
          this,
          Invocation.getter(#dbContext),
        ),
      ) as _i1.DbContext<_i1.IEntity>);

  @override
  set dbContext(_i1.DbContext<_i1.IEntity>? _dbContext) => super.noSuchMethod(
        Invocation.setter(
          #dbContext,
          _dbContext,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i1.OrmEngine<TEntity, TMeta, _i1.DbContext<TEntity>> getStorage<
          TEntity extends _i1.IEntity,
          TMeta extends _i1.EntityMeta<TEntity>>(TEntity? t) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStorage,
          [t],
        ),
        returnValue: _FakeOrmEngine_1<TEntity, TMeta, _i1.DbContext<TEntity>>(
          this,
          Invocation.method(
            #getStorage,
            [t],
          ),
        ),
      ) as _i1.OrmEngine<TEntity, TMeta, _i1.DbContext<TEntity>>);

  @override
  _i1.OrmManager copyWith({
    _i1.DbEngine? engine,
    int? dbVersion,
    String? dbName,
    List<_i1.IEntity>? tables,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #engine: engine,
            #dbVersion: dbVersion,
            #dbName: dbName,
            #tables: tables,
          },
        ),
        returnValue: _FakeOrmManager_2(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #engine: engine,
              #dbVersion: dbVersion,
              #dbName: dbName,
              #tables: tables,
            },
          ),
        ),
      ) as _i1.OrmManager);
}

/// A class which mocks [TestEntityOrm].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestEntityOrm extends _i2.Mock implements _i3.TestEntityOrm {
  MockTestEntityOrm() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.DbContext<_i1.IEntity> get dbContext => (super.noSuchMethod(
        Invocation.getter(#dbContext),
        returnValue: _FakeDbContext_0<_i1.IEntity>(
          this,
          Invocation.getter(#dbContext),
        ),
      ) as _i1.DbContext<_i1.IEntity>);

  @override
  _i3.TestEntity get mType => (super.noSuchMethod(
        Invocation.getter(#mType),
        returnValue: _FakeTestEntity_3(
          this,
          Invocation.getter(#mType),
        ),
      ) as _i3.TestEntity);

  @override
  bool get useIsolateDefault => (super.noSuchMethod(
        Invocation.getter(#useIsolateDefault),
        returnValue: false,
      ) as bool);

  @override
  _i3.TestEntityMeta get t => (super.noSuchMethod(
        Invocation.getter(#t),
        returnValue: _FakeTestEntityMeta_4(
          this,
          Invocation.getter(#t),
        ),
      ) as _i3.TestEntityMeta);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i4.Future<_i3.TestEntity?> insert(
    _i3.TestEntity? item, {
    bool? useIsolate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [item],
          {#useIsolate: useIsolate},
        ),
        returnValue: _i4.Future<_i3.TestEntity?>.value(),
      ) as _i4.Future<_i3.TestEntity?>);

  @override
  _i4.Future<List<_i3.TestEntity>?> insertList(
    Iterable<_i3.TestEntity>? items, {
    bool? useIsolate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertList,
          [items],
          {#useIsolate: useIsolate},
        ),
        returnValue: _i4.Future<List<_i3.TestEntity>?>.value(),
      ) as _i4.Future<List<_i3.TestEntity>?>);

  @override
  _i4.Future<_i3.TestEntity?> insertOrUpdate(
    _i3.TestEntity? item, {
    bool? useIsolate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdate,
          [item],
          {#useIsolate: useIsolate},
        ),
        returnValue: _i4.Future<_i3.TestEntity?>.value(),
      ) as _i4.Future<_i3.TestEntity?>);

  @override
  _i4.Future<List<_i3.TestEntity>?> insertOrUpdateList(
    Iterable<_i3.TestEntity>? items, {
    bool? useIsolate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOrUpdateList,
          [items],
          {#useIsolate: useIsolate},
        ),
        returnValue: _i4.Future<List<_i3.TestEntity>?>.value(),
      ) as _i4.Future<List<_i3.TestEntity>?>);

  @override
  _i4.Future<_i3.TestEntity?> firstWhereOrNull({
    List<_i1.ColumnDefinition<_i1.IEntity, dynamic>>? Function(
            _i3.TestEntityMeta)?
        columns,
    List<_i1.OrmOrder>? Function(_i3.TestEntityMeta)? orderBy,
    required _i1.Filter Function(_i3.TestEntityMeta)? where,
    int? offset,
    bool? useIsolate,
    Map<String, dynamic>? isolateArgs,
    void Function(Map<String, dynamic>?)? onIsolatePreMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhereOrNull,
          [],
          {
            #columns: columns,
            #orderBy: orderBy,
            #where: where,
            #offset: offset,
            #useIsolate: useIsolate,
            #isolateArgs: isolateArgs,
            #onIsolatePreMap: onIsolatePreMap,
          },
        ),
        returnValue: _i4.Future<_i3.TestEntity?>.value(),
      ) as _i4.Future<_i3.TestEntity?>);

  @override
  _i4.Future<Map<String, dynamic>?> firstWhereOrNullMap({
    List<_i1.ColumnDefinition<_i1.IEntity, dynamic>>? Function(
            _i3.TestEntityMeta)?
        columns,
    List<_i1.OrmOrder>? Function(_i3.TestEntityMeta)? orderBy,
    required _i1.Filter Function(_i3.TestEntityMeta)? where,
    int? offset,
    bool? useIsolate,
    Map<String, dynamic>? isolateArgs,
    void Function(Map<String, dynamic>?)? onIsolatePreMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhereOrNullMap,
          [],
          {
            #columns: columns,
            #orderBy: orderBy,
            #where: where,
            #offset: offset,
            #useIsolate: useIsolate,
            #isolateArgs: isolateArgs,
            #onIsolatePreMap: onIsolatePreMap,
          },
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<T> getSum<T>({
    required _i1.ColumnDefinition<_i1.IEntity, dynamic> Function(
            _i3.TestEntityMeta)?
        column,
    _i1.Filter Function(_i3.TestEntityMeta)? where,
    bool? useIsolate,
    Map<String, dynamic>? isolateArgs,
    void Function(Map<String, dynamic>?)? onIsolatePreMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSum,
          [],
          {
            #column: column,
            #where: where,
            #useIsolate: useIsolate,
            #isolateArgs: isolateArgs,
            #onIsolatePreMap: onIsolatePreMap,
          },
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #getSum,
                  [],
                  {
                    #column: column,
                    #where: where,
                    #useIsolate: useIsolate,
                    #isolateArgs: isolateArgs,
                    #onIsolatePreMap: onIsolatePreMap,
                  },
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_5<T>(
              this,
              Invocation.method(
                #getSum,
                [],
                {
                  #column: column,
                  #where: where,
                  #useIsolate: useIsolate,
                  #isolateArgs: isolateArgs,
                  #onIsolatePreMap: onIsolatePreMap,
                },
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<T> getSumProduct<T>({
    required List<_i1.ColumnDefinition<_i1.IEntity, dynamic>> Function(
            _i3.TestEntityMeta)?
        columns,
    _i1.Filter Function(_i3.TestEntityMeta)? where,
    bool? useIsolate,
    Map<String, dynamic>? isolateArgs,
    void Function(Map<String, dynamic>?)? onIsolatePreMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSumProduct,
          [],
          {
            #columns: columns,
            #where: where,
            #useIsolate: useIsolate,
            #isolateArgs: isolateArgs,
            #onIsolatePreMap: onIsolatePreMap,
          },
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #getSumProduct,
                  [],
                  {
                    #columns: columns,
                    #where: where,
                    #useIsolate: useIsolate,
                    #isolateArgs: isolateArgs,
                    #onIsolatePreMap: onIsolatePreMap,
                  },
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_5<T>(
              this,
              Invocation.method(
                #getSumProduct,
                [],
                {
                  #columns: columns,
                  #where: where,
                  #useIsolate: useIsolate,
                  #isolateArgs: isolateArgs,
                  #onIsolatePreMap: onIsolatePreMap,
                },
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<int> getCount({
    _i1.Filter Function(_i3.TestEntityMeta)? where,
    bool? useIsolate,
    Map<String, dynamic>? isolateArgs,
    void Function(Map<String, dynamic>?)? onIsolatePreMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCount,
          [],
          {
            #where: where,
            #useIsolate: useIsolate,
            #isolateArgs: isolateArgs,
            #onIsolatePreMap: onIsolatePreMap,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> delete({
    _i1.Filter Function(_i3.TestEntityMeta)? where,
    bool? all,
    bool? useIsolate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #where: where,
            #all: all,
            #useIsolate: useIsolate,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> update({
    required _i1.Filter Function(_i3.TestEntityMeta)? where,
    _i3.TestEntity? entity,
    Map<_i1.ColumnDefinition<_i1.IEntity, dynamic>, dynamic> Function(
            _i3.TestEntityMeta)?
        columnValues,
    bool? useIsolate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #where: where,
            #entity: entity,
            #columnValues: columnValues,
            #useIsolate: useIsolate,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i3.TestEntity>> query({
    _i1.Filter Function(_i3.TestEntityMeta)? where,
    List<_i1.ColumnDefinition<_i1.IEntity, dynamic>>? Function(
            _i3.TestEntityMeta)?
        columns,
    List<_i1.OrmOrder>? Function(_i3.TestEntityMeta)? orderBy,
    int? limit,
    int? offset,
    bool? useIsolate,
    Map<String, dynamic>? isolateArgs,
    void Function(Map<String, dynamic>?)? onIsolatePreMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [],
          {
            #where: where,
            #columns: columns,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
            #useIsolate: useIsolate,
            #isolateArgs: isolateArgs,
            #onIsolatePreMap: onIsolatePreMap,
          },
        ),
        returnValue: _i4.Future<List<_i3.TestEntity>>.value(<_i3.TestEntity>[]),
      ) as _i4.Future<List<_i3.TestEntity>>);

  @override
  _i4.Future<List<Map<String, dynamic>>> queryMap({
    _i1.Filter Function(_i3.TestEntityMeta)? where,
    List<_i1.ColumnDefinition<_i1.IEntity, dynamic>>? Function(
            _i3.TestEntityMeta)?
        columns,
    List<_i1.OrmOrder>? Function(_i3.TestEntityMeta)? orderBy,
    int? limit,
    int? offset,
    bool? useIsolate,
    Map<String, dynamic>? isolateArgs,
    void Function(Map<String, dynamic>?)? onIsolatePreMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryMap,
          [],
          {
            #where: where,
            #columns: columns,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
            #useIsolate: useIsolate,
            #isolateArgs: isolateArgs,
            #onIsolatePreMap: onIsolatePreMap,
          },
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<List<_i3.TestEntity>> where({
    List<_i1.ColumnDefinition<_i1.IEntity, dynamic>>? Function(
            _i3.TestEntityMeta)?
        columns,
    List<_i1.OrmOrder>? Function(_i3.TestEntityMeta)? orderBy,
    _i1.Filter Function(_i3.TestEntityMeta)? filter,
    int? limit,
    int? offset,
    bool? useIsolate,
    Map<String, dynamic>? isolateArgs,
    void Function(Map<String, dynamic>?)? onIsolatePreMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [],
          {
            #columns: columns,
            #orderBy: orderBy,
            #filter: filter,
            #limit: limit,
            #offset: offset,
            #useIsolate: useIsolate,
            #isolateArgs: isolateArgs,
            #onIsolatePreMap: onIsolatePreMap,
          },
        ),
        returnValue: _i4.Future<List<_i3.TestEntity>>.value(<_i3.TestEntity>[]),
      ) as _i4.Future<List<_i3.TestEntity>>);

  @override
  _i4.Future<List<Map<String, dynamic>>> whereMap({
    List<_i1.ColumnDefinition<_i1.IEntity, dynamic>>? Function(
            _i3.TestEntityMeta)?
        columns,
    List<_i1.OrmOrder>? Function(_i3.TestEntityMeta)? orderBy,
    _i1.Filter Function(_i3.TestEntityMeta)? filter,
    int? limit,
    int? offset,
    bool? useIsolate,
    Map<String, dynamic>? isolateArgs,
    void Function(Map<String, dynamic>?)? onIsolatePreMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereMap,
          [],
          {
            #columns: columns,
            #orderBy: orderBy,
            #filter: filter,
            #limit: limit,
            #offset: offset,
            #useIsolate: useIsolate,
            #isolateArgs: isolateArgs,
            #onIsolatePreMap: onIsolatePreMap,
          },
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<List<Map<String, Object?>>> rawQuery(
    _i1.Filter Function(_i3.TestEntityMeta)? where,
    String? query, {
    bool? useIsolate,
    Map<String, dynamic>? isolateArgs,
    void Function(Map<String, dynamic>?)? onIsolatePreMap,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQuery,
          [
            where,
            query,
          ],
          {
            #useIsolate: useIsolate,
            #isolateArgs: isolateArgs,
            #onIsolatePreMap: onIsolatePreMap,
          },
        ),
        returnValue: _i4.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i4.Future<List<Map<String, Object?>>>);

  @override
  _i4.Future<_i5.FormattedQuery> whereString(
    _i1.Filter Function(_i3.TestEntityMeta)? filter,
    bool? useIsolate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #whereString,
          [
            filter,
            useIsolate,
          ],
        ),
        returnValue: _i4.Future<_i5.FormattedQuery>.value(_FakeFormattedQuery_6(
          this,
          Invocation.method(
            #whereString,
            [
              filter,
              useIsolate,
            ],
          ),
        )),
      ) as _i4.Future<_i5.FormattedQuery>);
}
